{"version":3,"sources":["containers/settings.jsx","store/reducers/user.jsx","actions/actionTypes.jsx","store/reducers/proxy.jsx","store/reducers/template_campaign.jsx","store/reducers/index.jsx","store/store.jsx","components/MarkDown.jsx","components/Home.jsx","components/Settings.jsx","actions/actionUser.jsx","components/UsersFunctions.jsx","components/UsersList.jsx","components/Users.jsx","components/SideBar.jsx","actions/actionProxy.jsx","components/ProxiesFunctions.jsx","components/Proxies.jsx","components/createCampaign.jsx","actions/actionTemplateCampaign.jsx","components/CampaignsTemplates/CampaignsFunctions.jsx","components/CampaignsTemplates/CampaignsList.jsx","containers/CampaignsTemplates.jsx","containers/WebPage.jsx","index.jsx"],"names":["settings","url","userReducer","state","isLoading","data","error","action","type","Object","assign","proxyReducer","proxyId","updatedData","filter","proxy","_id","TCampaignReducer","allReducers","combineReducers","users","UserReducers","proxies","ProxyReducers","tcampaigns","TCampaigns","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","AllReducers","applyMiddleware","thunk","Footer","Layout","Content","React","Component","Header","Home","style","margin","height","overflowY","Settings","background","fetchUsers","dispatch","axios","get","then","response","catch","console","log","Option","Select","layout","labelCol","span","wrapperCol","AddUser","props","setModalVisible","modal","setState","setModalLoading","loading","onFinish","values","a","post","user","reset","formRef","current","resetFields","createRef","this","theme","mode","lineHeight","selectable","Item","key","icon","PlusOutlined","onClick","title","wrapClassName","visible","confirmLoading","onCancel","cancelText","okText","okButtonProps","form","htmlType","name","ref","label","rules","required","defaultValue","showSearch","placeholder","optionFilterProp","filterOption","input","option","children","indexOf","map","value","color","region","ip","port","connect","loader","LoadingOutlined","fontSize","spin","UsersList","usersList","table","length","forEach","push","className","xxl","xl","lg","md","sm","xs","extra","href","width","actions","CloseCircleOutlined","onConfirm","handleDelete","danger","ReloadOutlined","handleUpdate","updateLoaders","bms","bm","ad_accounts","marginLeft","ad_account","account_status_text","pages","page","success","setUpdate_Loaders","res","message","err","index","spinning","size","indicator","tip","marginTop","alignment","gutter","padding","Users","UsersFunctions","SideBar","defaultSelectedKeys","to","HomeOutlined","UserOutlined","InteractionOutlined","SnippetsOutlined","SolutionOutlined","SettingOutlined","LogoutOutlined","fetchProxies","help","msg","text","warning","Proxies","checkLoaders","columns","dataIndex","sorter","b","sortDirections","render","record","handleCheck","loadings","setCheck_Loader","checkStatus","dataSource","createCampaign","status","visibleModal","handleCancel","e","resetForm","isUserSelected","isAdAccountSelected","is_proxy_available","ad_account_id","pixels","user_id","item","formData","campaign","info","proxy_id","create_campaign_document","id","campaign_id","createAdSets_document","success_adsets","SmileOutlined","initialValues","proxy_value","users_list","display","proxy_list","ad_accounts_list","pages_list","templates_campaigns","pixels_list","setFieldsValue","campaigns_settings","options","i","pixel","onChange","userSelected","ad_account_Selected","account_id","loadPixels","fetchTemplatesCampaigns","TextArea","Input","CampaignsFunctions","edit_adset","campaign_data","adsets","adsets_edit_count","edit_adset_content","showIcon","marginBottom","hidden","allowClear","countries","country","life_events","event","edit_campaign","c_data","edit_campaign_count","edit_ad","adset_key","y","ads","ad_edit_count","new_campaign","str","JSON","stringify","default","default_campaign","parse","buying_type","objective","adset","destination_type","daily_budget","age_min","geo_locations","custom_event_type","window_days","ad","columns_ads","pagination","columns_adset","expandable","expandedRowRender","ad_rows","new_ad","rowExpandable","minWidth","main_table","columns_campaign","adsets_row","new_adset","bordered","splice","adset_source","lastId","adset_ads","newobj_ad","t","file_image","fileList","src","thumbUrl","remove_ad","copy_ad","content","edit_ad_content","trigger","overlayStyle","gender","events","eventText","remove_adset","copy_adset","rows","valuePropName","listType","UploadOutlined","edit_campaign_content","load_life_events","load_countries","CampaignsList","campaign_key","container","image","Empty","PRESENTED_IMAGE_SIMPLE","CampaignsTemplates","files","Sider","WebPage","config","breakpoint","collapsedWidth","onCollapse","collapsed","stype","position","exact","path","component","app","document","getElementById","App","ReactDOM"],"mappings":"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","file":"static/js/main.94e2f46c.chunk.js","sourcesContent":["let settings = {\n    url: \"\",\n};\n\n//console.log(process.env);\n\nif (process.env.NODE_ENV === \"development\") {\n    console.log(\"DEVELOP MODE\");\n    settings.url = \"http://localhost:8080\";\n}\n\nexport default settings;\n","import * as types from './../../actions/actionTypes.jsx';\n\n\nfunction userReducer(state = {\n\tisLoading: false,\n\tdata: {},\n\terror: false}\n, action = null) {\n\tswitch(action.type) {\n\t\tcase types.RECV_USER:\n\t\t\treturn Object.assign({}, state, {isLoading: false, data: action.data, error: false });\n\t\tcase types.REQ_USER:\n\t\t\treturn Object.assign({}, state, {isLoading: true, error: false });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\n\nexport default userReducer;","export const REQ_PROXY = \"REQ_PROXY\";\nexport const RECV_PROXY = \"RECV_PROXY\";\nexport const REQ_PROXY_DELETE = \"REQ_PROXY_DELETE\";\n\nexport const REQ_USER = \"REQ_USER\";\nexport const RECV_USER = \"RECV_USER\";\n\nexport const REQ_TCampaigns = \"REQ_TCampaigns\";\nexport const RECV_TCampaigns = \"RECV_TCampaigns\";\n","import * as types from \"./../../actions/actionTypes.jsx\";\n\nfunction proxyReducer(\n    state = {\n        isLoading: false,\n        data: [],\n        error: false,\n    },\n    action = null\n) {\n    switch (action.type) {\n        case types.RECV_PROXY:\n            return Object.assign({}, state, {\n                isLoading: false,\n                data: action.data,\n                error: false,\n            });\n        case types.REQ_PROXY:\n            return Object.assign({}, state, { isLoading: true, error: false });\n        case types.REQ_PROXY_DELETE: {\n            const proxyId = action.data;\n            let updatedData = state.data.filter(\n                (proxy) => proxy._id !== proxyId\n            );\n\n            return Object.assign({}, state, {\n                isLoading: true,\n                data: updatedData,\n                error: false,\n            });\n        }\n        default:\n            return state;\n    }\n}\n\nexport default proxyReducer;\n","import * as types from \"./../../actions/actionTypes.jsx\";\n\nfunction TCampaignReducer(\n    state = {\n        isLoading: false,\n        data: {},\n        error: false,\n    },\n    action = null\n) {\n    switch (action.type) {\n        case types.RECV_TCampaigns:\n            return Object.assign({}, state, {\n                isLoading: false,\n                data: action.data,\n                error: false,\n            });\n        case types.REQ_TCampaigns:\n            return Object.assign({}, state, { isLoading: true, error: false });\n        default:\n            return state;\n    }\n}\n\nexport default TCampaignReducer;\n","import { combineReducers } from \"redux\";\nimport UserReducers from \"./user.jsx\";\nimport ProxyReducers from \"./proxy.jsx\";\nimport TCampaigns from \"./template_campaign\";\n\nconst allReducers = combineReducers({\n    users: UserReducers,\n    proxies: ProxyReducers,\n    tcampaigns: TCampaigns,\n});\n\nexport default allReducers;\n","import {createStore, applyMiddleware, compose} from 'redux';\n\nimport AllReducers from './reducers/index.jsx';\n\n\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(AllReducers, composeEnhancers(\n  applyMiddleware(thunk)));\n\n\n\nexport { store };","import React from \"react\";\n\nimport { Layout } from \"antd\";\n\nconst { Footer } = Layout;\n\nexport default class MarkDown extends React.Component {\n    render() {\n        return (\n            <Footer style={{ textAlign: \"center\" }}>\n                Scaler 2020 Created by Vladimir N.\n            </Footer>\n        );\n    }\n}\n","import React from \"react\";\n\nimport MarkDown from \"./MarkDown.jsx\";\nimport { Layout } from \"antd\";\nconst { Header, Content } = Layout;\n\nexport default class Home extends React.Component {\n    render() {\n        return (\n            <Layout>\n                {/* <Header style={{ background: \"#fff\", padding: 0 }}></Header> */}\n\n                <Content\n                    style={{\n                        margin: \"24px 16px 0\",\n                        height: \"100%\",\n                        overflowY: \"auto\",\n                    }}\n                ></Content>\n                {/* <MarkDown /> */}\n            </Layout>\n        );\n    }\n}\n","import React from \"react\";\n\nimport MarkDown from \"./MarkDown.jsx\";\nimport { Layout } from \"antd\";\nconst { Header, Content } = Layout;\n\nexport default class Settings extends React.Component {\n    render() {\n        return (\n            <Layout>\n                {/* <Header style={{ background: \"#fff\", padding: 0 }}></Header> */}\n\n                <Content\n                    style={{\n                        background: \"#fff\",\n                        margin: \"16px 12px 0\",\n                        height: \"100%\",\n                        overflowY: \"auto\",\n                    }}\n                >\n                    В разработке\n                </Content>\n                {/* <MarkDown /> */}\n            </Layout>\n        );\n    }\n}\n","import * as types from \"./actionTypes.jsx\";\nimport axios from \"axios\";\n\nfunction requestUser() {\n    return { type: types.REQ_USER };\n}\n\nfunction receiveUser(json) {\n    return {\n        type: types.RECV_USER,\n        data: json,\n    };\n}\n\nexport function fetchUsers(url) {\n    return function (dispatch) {\n        dispatch(requestUser());\n        return axios\n            .get(url)\n            .then(function (response) {\n                dispatch(receiveUser(response.data));\n            })\n            .catch(function (response) {\n                console.log(response);\n            });\n    };\n}\n","import settings from \"./../containers/settings\";\n\nimport React from \"react\";\n\nimport { store } from \"../store/store.jsx\";\n\nimport { fetchUsers } from \"./../actions/actionUser.jsx\";\n\nimport axios from \"axios\";\n\nimport { connect } from \"react-redux\";\n\nimport { Menu, Modal, Button, Select } from \"antd\";\n\nimport { PlusOutlined, ReloadOutlined } from \"@ant-design/icons\";\n\nimport { Form, Input } from \"antd\";\nconst { Option } = Select;\n\nlet url = settings.url;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\n\nclass AddUser extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { modal: false, loading: false };\n        this.formRef = React.createRef();\n    }\n    setModalVisible = (modal) => {\n        this.setState({ modal: modal });\n    };\n    setModalLoading = (loading) => {\n        this.setState({ loading: loading });\n    };\n    onFinish = async (values) => {\n        this.setModalLoading(true);\n        let result = await axios.post(`${url}/api/users/new`, values.user);\n        store.dispatch(fetchUsers(`${url}/api/users/`));\n\n        this.setModalLoading(false);\n        this.setModalVisible(false);\n        this.reset();\n    };\n    reset = () => {\n        this.formRef.current.resetFields();\n    };\n    render() {\n        let proxies = this.props.proxies.data;\n        console.log(proxies);\n        return (\n            <Menu\n                theme=\"light\"\n                mode=\"horizontal\"\n                style={{ lineHeight: \"64px\" }}\n                selectable={false}\n            >\n                <Menu.Item key=\"1\">\n                    <Button\n                        icon={<PlusOutlined />}\n                        onClick={() => this.setModalVisible(true)}\n                    >\n                        Добавить пользователя\n                    </Button>\n                </Menu.Item>\n                {/* <Menu.Item key=\"2\" danger>\n                    <Button\n                        icon={<ReloadOutlined />}\n                        onClick={() => console.log(\"Update\")}\n                    >\n                        Обновить все данные\n                    </Button>\n                </Menu.Item> */}\n                <Modal\n                    title=\"Создание нового пользователя\"\n                    wrapClassName=\"vertical-center-modal\"\n                    visible={this.state.modal}\n                    confirmLoading={this.state.loading}\n                    onCancel={() => this.setModalVisible(false)}\n                    cancelText=\"Закрыть\"\n                    okText=\"Создать\"\n                    okButtonProps={{\n                        form: \"new-user\",\n                        key: \"submit\",\n                        htmlType: \"submit\",\n                    }}\n                >\n                    <Form\n                        {...layout}\n                        name=\"new-user\"\n                        onFinish={this.onFinish}\n                        ref={this.formRef}\n                    >\n                        <Form.Item\n                            name={[\"user\", \"name\"]}\n                            label=\"Имя\"\n                            rules={[{ required: true }]}\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            name={[\"user\", \"user_agent\"]}\n                            label=\"UserAgent\"\n                            rules={[{ required: true }]}\n                        >\n                            <Input defaultValue=\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.4 Safari/605.1.15\" />\n                        </Form.Item>\n                        <Form.Item\n                            name={[\"user\", \"access_token\"]}\n                            label=\"AccessToken\"\n                            rules={[{ required: true }]}\n                        >\n                            <Input defaultValue=\"EAAGNO4a7r2wBADA3DZCUbPoGoBcj2qQXwP5ldqaBCwQ11VmoIRDcZCYWrGBWiTid8s7FZCZAZCXrp0g1dkMu8LwGMZAMaHYRe9uvzY86e0BtH7LJUKsGbSygib6kw3qmQh2oCHGODc7Enwi4o1JRBAnNVDXQMDLfKv96ElM3OWwXQ586wN5L6H\" />\n                        </Form.Item>\n                        <Form.Item\n                            name={[\"user\", \"proxy_id\"]}\n                            label=\"Proxy\"\n                            rules={[{ required: true }]}\n                        >\n                            <Select\n                                showSearch\n                                placeholder=\"Выберите прокси\"\n                                optionFilterProp=\"children\"\n                                filterOption={(input, option) =>\n                                    option.children.indexOf(input) >= 0\n                                }\n                            >\n                                {proxies.map((proxy) => {\n                                    console.log(1);\n                                    return (\n                                        <Option value={proxy._id}>\n                                            <span style={{ color: \"green\" }}>\n                                                {proxy.region}\n                                            </span>{\" \"}\n                                            / {proxy.name} / {proxy.ip}:\n                                            {proxy.port} ({proxy.region})\n                                        </Option>\n                                    );\n                                })}\n                            </Select>\n                        </Form.Item>\n                    </Form>\n                </Modal>\n            </Menu>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        proxies: state.proxies,\n    };\n}\n\nexport default connect(mapStateToProps)(AddUser);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Card, Row, Col, Spin, Button, Popconfirm, message } from \"antd\";\nimport {\n    LoadingOutlined,\n    CloseCircleOutlined,\n    ReloadOutlined,\n} from \"@ant-design/icons\";\n\nimport { store } from \"./../store/store.jsx\";\n\nimport { fetchUsers } from \"./../actions/actionUser.jsx\";\n\nimport axios from \"axios\";\n\nimport settings from \"./../containers/settings\";\nlet url = settings.url;\n\nconst loader = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nclass UsersList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { updateLoaders: {} };\n    }\n    async handleDelete(user) {\n        let res = await axios.get(`${url}/api/users/remove/${user._id}`);\n        if (res.data.success) {\n            store.dispatch(fetchUsers(`${url}/api/users/`));\n        }\n    }\n    async handleUpdate(user) {\n        this.setUpdate_Loaders(user._id, true);\n        let res = await axios.get(`${url}/api/users/${user._id}/update`);\n        console.log(res.data);\n        if (res.data.success) {\n            store.dispatch(fetchUsers(`${url}/api/users/`));\n            message.success(\n                `Обновление пользователя (${user.name}) прошло успешно`\n            );\n        } else if (res.data.err) message.error(res.data.err);\n        console.log(\"Update user\");\n        this.setUpdate_Loaders(user._id, false);\n    }\n    setUpdate_Loaders(index, value) {\n        let updateLoaders = this.state.updateLoaders;\n        updateLoaders[index] = value;\n        this.setState({\n            updateLoaders: updateLoaders,\n        });\n    }\n    usersList = () => {\n        console.log(this.props);\n        let table = [];\n\n        // Outer loop to create parent\n        let users = this.props.users.data;\n        if (users.length) {\n            users.forEach((user) => {\n                table.push(\n                    <Col\n                        className=\"gutter-row\"\n                        span={4}\n                        xxl={5}\n                        xl={8}\n                        lg={10}\n                        md={10}\n                        sm={12}\n                        xs={12}\n                    >\n                        <Card\n                            title={user.name}\n                            extra={<a href=\"#\">Открыть</a>}\n                            style={{ width: 300 }}\n                            actions={[\n                                <Popconfirm\n                                    title=\"Вы уверены?\"\n                                    cancelText=\"Нет\"\n                                    okText=\"Да\"\n                                    icon={\n                                        <CloseCircleOutlined\n                                            style={{ color: \"red\" }}\n                                        />\n                                    }\n                                    onConfirm={() => this.handleDelete(user)}\n                                >\n                                    <Button danger type=\"link\">\n                                        Удалить\n                                    </Button>\n                                </Popconfirm>,\n                                <Popconfirm\n                                    title=\"Вы уверены?\"\n                                    cancelText=\"Нет\"\n                                    okText=\"Да\"\n                                    icon={<ReloadOutlined />}\n                                    onConfirm={() => this.handleUpdate(user)}\n                                >\n                                    <Button\n                                        type=\"link\"\n                                        className=\"link-success\"\n                                        loading={\n                                            this.state.updateLoaders[user._id]\n                                        }\n                                    >\n                                        Обновить\n                                    </Button>\n                                </Popconfirm>,\n                            ]}\n                        >\n                            <div>\n                                <p>Business Managers:</p>\n                                <ul>\n                                    {user.bms.map((bm) => {\n                                        return (\n                                            <li>\n                                                {bm.name}\n                                                {bm.ad_accounts.length > 0 && (\n                                                    <div>\n                                                        <small\n                                                            style={{\n                                                                marginLeft:\n                                                                    \"12px\",\n                                                            }}\n                                                        >\n                                                            Ad Accounts:\n                                                        </small>\n                                                        <ul>\n                                                            {bm.ad_accounts.map(\n                                                                (\n                                                                    ad_account\n                                                                ) => {\n                                                                    return (\n                                                                        <li>\n                                                                            <small>\n                                                                                {\n                                                                                    ad_account.name\n                                                                                }{\" \"}\n                                                                                (\n                                                                                {\n                                                                                    ad_account.account_status_text\n                                                                                }\n\n                                                                                )\n                                                                            </small>\n                                                                        </li>\n                                                                    );\n                                                                }\n                                                            )}\n                                                        </ul>\n                                                    </div>\n                                                )}\n                                                {bm.pages.length > 0 && (\n                                                    <div>\n                                                        <small\n                                                            style={{\n                                                                marginLeft:\n                                                                    \"12px\",\n                                                            }}\n                                                        >\n                                                            Pages:\n                                                        </small>\n                                                        <ul>\n                                                            {bm.pages.map(\n                                                                (page) => {\n                                                                    return (\n                                                                        <li>\n                                                                            <small>\n                                                                                {\n                                                                                    page.name\n                                                                                }\n                                                                            </small>\n                                                                        </li>\n                                                                    );\n                                                                }\n                                                            )}\n                                                        </ul>\n                                                    </div>\n                                                )}\n                                            </li>\n                                        );\n                                    })}\n                                </ul>\n                            </div>\n                        </Card>\n                    </Col>\n                );\n            });\n        }\n        return table;\n    };\n    render() {\n        console.log(this.props);\n        return (\n            <Spin\n                spinning={this.props.users.isLoading}\n                size=\"large\"\n                indicator={loader}\n                tip=\"Загрузка...\"\n                style={{ fontSize: \"20px\", marginTop: \"25%\" }}\n                alignment=\"middle\"\n            >\n                <Row gutter={12} style={{ padding: \"20px\" }}>\n                    {this.usersList()}\n                </Row>\n            </Spin>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        users: state.users,\n    };\n}\n\nexport default connect(mapStateToProps)(UsersList);\n","import React from \"react\";\n\nimport UsersFunctions from \"./UsersFunctions.jsx\";\nimport UsersList from \"./UsersList.jsx\";\n\nimport MarkDown from \"./MarkDown.jsx\";\nimport { Layout } from \"antd\";\nconst { Header, Content } = Layout;\n\nexport default class Users extends React.Component {\n    render() {\n        return (\n            <Layout>\n                <Header style={{ background: \"#fff\", padding: \"0\" }}>\n                    <UsersFunctions />\n                </Header>\n\n                <Content\n                    style={{\n                        background: \"#fff\",\n                        margin: \"16px 12px 0\",\n                        height: \"100%\",\n                        overflowY: \"auto\",\n                    }}\n                >\n                    <UsersList />\n                </Content>\n                {/* <MarkDown /> */}\n            </Layout>\n        );\n    }\n}\n","import React from \"react\";\n\nimport { Menu, Button } from \"antd\";\n\nimport {\n    LogoutOutlined,\n    UserOutlined,\n    SettingOutlined,\n    HomeOutlined,\n    InteractionOutlined,\n    SolutionOutlined,\n    SnippetsOutlined,\n} from \"@ant-design/icons\";\n\nimport { Link } from \"react-router-dom\";\n\nexport default class SideBar extends React.Component {\n    render() {\n        return (\n            <Menu\n                theme=\"dark\"\n                mode=\"inline\"\n                style={{ height: \"100%\" }}\n                defaultSelectedKeys={[\"1\"]}\n            >\n                <Menu.Item key=\"1\">\n                    <Link to=\"/home\">\n                        <HomeOutlined />\n                        Главная\n                    </Link>\n                </Menu.Item>\n                <Menu.Item key=\"2\">\n                    <Link to=\"/users\">\n                        <UserOutlined />\n                        Пользователи\n                    </Link>\n                </Menu.Item>\n\n                <Menu.Item key=\"3\">\n                    <Link to=\"/proxies\">\n                        <InteractionOutlined />\n                        Прокси\n                    </Link>\n                </Menu.Item>\n\n                <Menu.Item key=\"4\">\n                    <Link to=\"/campaigns-templates\">\n                        <SnippetsOutlined />\n                        Шаблоны кампаний\n                    </Link>\n                </Menu.Item>\n\n                <Menu.Item key=\"5\">\n                    <Link to=\"/newcampaign\">\n                        <SolutionOutlined />\n                        Создание компании\n                    </Link>\n                </Menu.Item>\n\n                <Menu.Item key=\"6\">\n                    <Link to=\"/settings\">\n                        <SettingOutlined />\n                        Настройки\n                    </Link>\n                </Menu.Item>\n\n                <Menu.Item key=\"7\">\n                    <Link to=\"/logout\">\n                        <LogoutOutlined />\n                        Выйти\n                    </Link>\n                </Menu.Item>\n            </Menu>\n        );\n    }\n}\n","import axios from \"axios\";\nimport * as types from \"./actionTypes.jsx\";\n\nfunction requestProxy() {\n    return { type: types.REQ_PROXY };\n}\n\nfunction receiveProxy(json) {\n    return {\n        type: types.RECV_PROXY,\n        data: json,\n    };\n}\n\nexport function fetchProxies(url) {\n    return function (dispatch) {\n        dispatch(requestProxy());\n        return axios\n            .get(url)\n            .then(function (response) {\n                dispatch(receiveProxy(response.data));\n            })\n            .catch(function (response) {\n                console.log(response);\n            });\n    };\n}\n","import settings from \"./../containers/settings\";\n\nimport React from \"react\";\n\nimport { fetchProxies } from \"./../actions/actionProxy.jsx\";\n\nimport { store } from \"./../store/store.jsx\";\n\nimport axios from \"axios\";\n\nimport { Menu, Modal, Button, Select } from \"antd\";\n\nimport { PlusOutlined } from \"@ant-design/icons\";\n\nimport { Form, Input } from \"antd\";\nconst { Option } = Select;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\n\nlet url = settings.url;\n\nexport default class AddUser extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { modal: false, loading: false };\n        this.formRef = React.createRef();\n    }\n    setModalVisible = (modal) => {\n        this.setState({ modal: modal });\n    };\n    setModalLoading = (loading) => {\n        this.setState({ loading: loading });\n    };\n    onFinish = async (values) => {\n        this.setModalLoading(true);\n        let result = await axios.post(`${url}/api/proxies/new`, values.proxy);\n        store.dispatch(fetchProxies(`${url}/api/proxies/`));\n\n        this.setModalLoading(false);\n        this.setModalVisible(false);\n        this.reset();\n    };\n    reset = () => {\n        this.formRef.current.resetFields();\n    };\n    render() {\n        return (\n            <Menu\n                theme=\"light\"\n                mode=\"horizontal\"\n                style={{ lineHeight: \"64px\" }}\n                selectable={false}\n            >\n                <Menu.Item key=\"1\">\n                    <Button\n                        icon={<PlusOutlined />}\n                        onClick={() => this.setModalVisible(true)}\n                    >\n                        Добавить прокси\n                    </Button>\n                </Menu.Item>\n                <Modal\n                    title=\"Добавление прокси\"\n                    wrapClassName=\"vertical-center-modal\"\n                    visible={this.state.modal}\n                    confirmLoading={this.state.loading}\n                    onCancel={() => this.setModalVisible(false)}\n                    cancelText=\"Закрыть\"\n                    okText=\"Создать\"\n                    okButtonProps={{\n                        form: \"new-proxy\",\n                        key: \"submit\",\n                        htmlType: \"submit\",\n                    }}\n                >\n                    <Form\n                        {...layout}\n                        name=\"new-proxy\"\n                        onFinish={this.onFinish}\n                        ref={this.formRef}\n                    >\n                        <Form.Item\n                            name={[\"proxy\", \"name\"]}\n                            label=\"Название\"\n                            rules={[{ required: true }]}\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            name={[\"proxy\", \"region\"]}\n                            label=\"Регион\"\n                            rules={[{ required: true }]}\n                        >\n                            <Input placeholder=\"US\" />\n                        </Form.Item>\n                        <Form.Item\n                            name={[\"proxy\", \"ip\"]}\n                            label=\"IP\"\n                            rules={[{ required: true }]}\n                            help=\"* only http proxies\"\n                        >\n                            <Input placeholder=\"127.0.0.1\" />\n                        </Form.Item>\n\n                        <Form.Item\n                            name={[\"proxy\", \"port\"]}\n                            label=\"PORT\"\n                            rules={[{ required: true }]}\n                        >\n                            <Input placeholder=\"3128\" />\n                        </Form.Item>\n                    </Form>\n                </Modal>\n            </Menu>\n        );\n    }\n}\n","import settings from \"./../containers/settings\";\n\nimport React from \"react\";\nimport { store } from \"./../store/store.jsx\";\n\nimport { fetchProxies } from \"./../actions/actionProxy.jsx\";\n\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport ProxiesFunctions from \"./ProxiesFunctions\";\nimport { CloseCircleOutlined } from \"@ant-design/icons\";\n\nimport { Layout, Table, Tag, Popconfirm, Button, message } from \"antd\";\nconst { Header, Content } = Layout;\n\nlet url = settings.url;\n\nlet msg = (type, text) => {\n    switch (type) {\n        case \"success\": {\n            message.success(text);\n            break;\n        }\n        case \"error\": {\n            message.error(text);\n            break;\n        }\n        case \"warning\": {\n            message.warning(text);\n            break;\n        }\n    }\n};\n\nclass Proxies extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { checkLoaders: {} };\n    }\n    dataSource() {\n        return this.props.proxies.data;\n    }\n    columns() {\n        let columns = [\n            {\n                title: \"Название\",\n                dataIndex: \"name\",\n                key: \"name\",\n\n                sorter: (a, b) => a.name.length == b.name.length,\n                sortDirections: [\"descend\", \"ascend\"],\n            },\n            {\n                title: \"Регион\",\n                dataIndex: \"region\",\n                key: \"region\",\n                sorter: (a, b) => a.region.length == b.region.length,\n                sortDirections: [\"descend\", \"ascend\"],\n                render: (region) => (\n                    <span>\n                        <Tag color=\"green\" key={region}>\n                            {region}\n                        </Tag>\n                    </span>\n                ),\n            },\n            {\n                title: \"IP\",\n                dataIndex: \"ip\",\n                key: \"ip\",\n            },\n            {\n                title: \"Port\",\n                key: \"port\",\n                dataIndex: \"port\",\n            },\n            {\n                title: \"Функции\",\n                key: \"action\",\n                render: (text, record) => [\n                    <Popconfirm\n                        title=\"Вы уверены?\"\n                        cancelText=\"Нет\"\n                        okText=\"Да\"\n                        icon={<CloseCircleOutlined style={{ color: \"red\" }} />}\n                        onConfirm={() => this.handleDelete(record)}\n                    >\n                        <Button type=\"link\" danger>\n                            Удалить\n                        </Button>\n                    </Popconfirm>,\n                    <Button\n                        loading={this.state.checkLoaders[record._id]}\n                        type=\"link\"\n                        onClick={() => {\n                            this.handleCheck(record);\n                        }}\n                    >\n                        Проверить\n                    </Button>,\n                ],\n            },\n        ];\n        return columns;\n    }\n    setCheck_Loader(index, value) {\n        let checkLoaders = this.state.checkLoaders;\n        checkLoaders[index] = value;\n        this.setState({\n            loadings: checkLoaders,\n        });\n    }\n    async handleDelete(record) {\n        let res = await axios.get(`${url}/api/proxies/remove/${record._id}`);\n        if (res.data.success) {\n            store.dispatch(fetchProxies(`${url}/api/proxies/`));\n        }\n    }\n    async handleCheck(record) {\n        this.setCheck_Loader(record._id, true);\n        console.log(record);\n        let checkStatus = await axios.get(\n            `${url}/api/proxies/${record._id}/check`\n        );\n        checkStatus = checkStatus.data;\n        if (checkStatus.success) {\n            msg(\n                \"success\",\n                `Проверка прокси (${checkStatus.proxy.name}) прошла успешно`\n            );\n        } else if (checkStatus.err) {\n            msg(\"error\", checkStatus.err);\n        }\n        this.setCheck_Loader(record._id, false);\n    }\n    render() {\n        return (\n            <Layout>\n                <Header style={{ background: \"#fff\", padding: 0 }}>\n                    <ProxiesFunctions />\n                </Header>\n                <Content\n                    style={{\n                        background: \"#fff\",\n                        margin: \"16px 12px 0\",\n                        height: \"100%\",\n                        overflowY: \"auto\",\n                    }}\n                >\n                    <Table\n                        dataSource={this.dataSource()}\n                        columns={this.columns()}\n                    />\n                </Content>\n            </Layout>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        proxies: state.proxies,\n    };\n}\n\nexport default connect(mapStateToProps)(Proxies);\n","import React from \"react\";\nimport settings from \"./../containers/settings\";\n\nimport {\n    Layout,\n    Menu,\n    Modal,\n    Button,\n    Select,\n    Form,\n    Input,\n    Spin,\n    Row,\n    Col,\n    Result,\n    Timeline,\n    Alert,\n    message,\n} from \"antd\";\nimport {\n    LoadingOutlined,\n    SmileOutlined,\n    PlusOutlined,\n    MinusCircleOutlined,\n} from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\n\nlet url = settings.url;\n\nconsole.log(\"SETTING URL: \" + url);\n\nconst { Header, Content } = Layout;\n\nconst { Option } = Select;\n\nconst layout = {\n    labelCol: {\n        span: 8,\n    },\n    wrapperCol: {\n        span: 16,\n    },\n};\nconst tailLayout = {\n    wrapperCol: {\n        offset: 8,\n        span: 16,\n    },\n};\n\nconst loader = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nclass createCampaign extends React.Component {\n    constructor(props) {\n        super(props);\n        this.formRef = React.createRef();\n        this.state = {\n            loading: false,\n            visibleModal: false,\n            is_proxy_available: false,\n            user: null,\n            isUserSelected: false,\n            isAdAccountSelected: false,\n            ad_account_id: null,\n            confirmLoading: false,\n\n            pixels: [],\n        };\n    }\n\n    setModalVisible = (status) => {\n        this.setState({\n            visibleModal: status,\n        });\n    };\n\n    handleCancel = (e) => {\n        this.setState({\n            visibleModal: false,\n        });\n    };\n    userSelected(user_id) {\n        let user;\n\n        this.props.users.data.forEach((item) => {\n            if (item._id == user_id) user = item;\n        });\n\n        if (user) {\n            this.setState({\n                user: user,\n                isUserSelected: true,\n            });\n        }\n    }\n    async onFinish(formData) {\n        console.log(formData);\n        let campaign = formData;\n        message.info(\n            `Процесс создания кампании начат. Не закрывайте эту страницу`\n        );\n\n        this.setModalLoading(true);\n        let res = await axios.get(\n            `${url}/api/proxies/${this.state.user.proxy_id}/check`\n        );\n        if (res.data.success) {\n            message.success(`Проверка прокси прошла успешно`);\n\n            let create_campaign_document = await axios.post(\n                `${url}/api/campaigns/new`,\n                campaign\n            );\n            let data = create_campaign_document.data;\n            if (data.success) {\n                message.success(`Компания (ID: ${data.id}) успешна создана`);\n                campaign.campaign_id = data.id;\n                let createAdSets_document = await axios.post(\n                    `${url}/api/adsets/create`,\n                    campaign\n                );\n\n                if (createAdSets_document.data.success) {\n                    message.success(\n                        `Успешно создано ${createAdSets_document.data.success_adsets} адсетов`\n                    );\n                    this.setModalLoading(false);\n                    this.setModalVisible(false);\n                    this.resetForm();\n                } else {\n                    message.error(\"Произошла ошибка при создании адсетов\");\n                }\n            }\n        } else if (res.data.err) {\n            message.error(res.data.err);\n        }\n        this.setModalLoading(false);\n    }\n\n    setModalLoading = (loading) => {\n        this.setState({ confirmLoading: loading });\n    };\n    resetForm = () => {\n        this.setState({\n            user: null,\n            isUserSelected: false,\n            isAdAccountSelected: false,\n        });\n        this.formRef.current.resetFields();\n    };\n    render() {\n        return (\n            <Layout>\n                {/* <Header style={{ background: \"#fff\", padding: 0 }}></Header> */}\n\n                <Content\n                    style={{\n                        background: \"#fff\",\n                        margin: \"16px 12px 0\",\n                        height: \"100%\",\n                        overflowY: \"auto\",\n                    }}\n                >\n                    <Result\n                        style={{ marginTop: \"5%\" }}\n                        icon={<SmileOutlined />}\n                        title=\"Давайте попробуем создать компанию!\"\n                        extra={\n                            <Button\n                                type=\"primary\"\n                                onClick={() => {\n                                    this.setModalVisible(true);\n                                }}\n                            >\n                                Создать\n                            </Button>\n                        }\n                    />\n\n                    <Modal\n                        title=\"Создание компании\"\n                        visible={this.state.visibleModal}\n                        onCancel={this.handleCancel}\n                        okButtonProps={{\n                            form: \"new-campaign\",\n                            key: \"submit\",\n                            htmlType: \"submit\",\n                        }}\n                        confirmLoading={this.state.confirmLoading}\n                        cancelText=\"Закрыть\"\n                        okText=\"Создать\"\n                    >\n                        <Form\n                            name=\"new-campaign\"\n                            onFinish={(formData) => this.onFinish(formData)}\n                            ref={this.formRef}\n                            {...layout}\n                            initialValues={{ proxy_id: this.proxy_value() }}\n                        >\n                            <Form.Item\n                                name={\"user_id\"}\n                                label=\"Пользователь\"\n                                rules={[{ required: true }]}\n                            >\n                                {this.users_list()}\n                            </Form.Item>\n                            <Form.Item\n                                name={\"proxy_id\"}\n                                rules={[{ required: true }]}\n                                label=\"Proxy\"\n                                style={\n                                    this.state.isUserSelected == true\n                                        ? {}\n                                        : { display: \"none\" }\n                                }\n                            >\n                                {this.proxy_list()}\n                            </Form.Item>\n                            <Form.Item\n                                name={\"ad_account_id\"}\n                                label=\"Рекламный аккаунт\"\n                                rules={[{ required: true }]}\n                                style={\n                                    this.state.isUserSelected == true\n                                        ? {}\n                                        : { display: \"none\" }\n                                }\n                            >\n                                {this.ad_accounts_list()}\n                            </Form.Item>\n\n                            <Form.Item\n                                name={\"page\"}\n                                label=\"Page\"\n                                rules={[{ required: true }]}\n                                style={\n                                    this.state.isAdAccountSelected == true\n                                        ? {}\n                                        : { display: \"none\" }\n                                }\n                            >\n                                {this.pages_list()}\n                            </Form.Item>\n                            <Form.Item\n                                name={\"template_campaign_id\"}\n                                label=\"Template Campaign\"\n                                rules={[{ required: true }]}\n                                style={\n                                    this.state.isAdAccountSelected == true\n                                        ? {}\n                                        : { display: \"none\" }\n                                }\n                            >\n                                {this.templates_campaigns()}\n                            </Form.Item>\n                            <Form.Item\n                                name={\"pixel\"}\n                                label=\"Pixel\"\n                                rules={[{ required: true }]}\n                                style={\n                                    this.state.isAdAccountSelected == true\n                                        ? {}\n                                        : { display: \"none\" }\n                                }\n                            >\n                                {this.pixels_list()}\n                            </Form.Item>\n                        </Form>\n                    </Modal>\n                </Content>\n\n                {/* <MarkDown /> */}\n            </Layout>\n        );\n    }\n    proxy_value() {\n        if (this.state.user) {\n            this.formRef.current.setFieldsValue({\n                proxy_id: this.state.user.proxy_id,\n            });\n            return this.state.user.proxy_id;\n        }\n    }\n    proxy_list() {\n        if (this.state.user) {\n            return (\n                <Select defaultValue={this.proxy_value()}>\n                    {this.props.proxies.data.map((proxy, index) => (\n                        <Option value={proxy._id}>\n                            {proxy.name} ({proxy.ip}:{proxy.port})\n                        </Option>\n                    ))}\n                </Select>\n            );\n        }\n    }\n    templates_campaigns() {\n        console.log(this.props.tcampaigns);\n\n        if (this.props.tcampaigns.isLoading == false) {\n            if (this.props.tcampaigns.data.campaigns_settings) {\n                return (\n                    <Select>\n                        {this.props.tcampaigns.data.campaigns_settings.map(\n                            (campaign, index) => (\n                                <Option value={campaign._id}>\n                                    {campaign.name}\n                                </Option>\n                            )\n                        )}\n                    </Select>\n                );\n            }\n        }\n    }\n    pages_list() {\n        let user = this.state.user;\n        let options = [];\n        if (user) {\n            user.bms.forEach((bm) => {\n                for (let i = 0; i < bm.pages.length; i++) {\n                    let page = bm.pages[i];\n                    options.push(<Option value={page.id}>{page.name}</Option>);\n                }\n            });\n            return <Select>{options}</Select>;\n        }\n    }\n    pixels_list() {\n        if (this.state.ad_account_id) {\n            return (\n                <Select>\n                    {this.state.pixels.map((pixel, index) => (\n                        <Option value={pixel.id}>\n                            {pixel.name} (id: {pixel.id})\n                        </Option>\n                    ))}\n                </Select>\n            );\n        }\n    }\n    users_list() {\n        let users = this.props.users.data;\n        if (users) {\n            if (users.length) {\n                return (\n                    <Select\n                        showSearch\n                        placeholder=\"Выберите пользователя\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) =>\n                            option.children.indexOf(input) >= 0\n                        }\n                        onChange={(value) => this.userSelected(value)}\n                    >\n                        {users.map((user) => {\n                            return (\n                                <Option value={user._id}>{user.name}</Option>\n                            );\n                        })}\n                    </Select>\n                );\n            }\n        }\n    }\n    ad_accounts_list() {\n        if (this.state.user) {\n            return (\n                <Select\n                    showSearch\n                    placeholder=\"Выберите рекламный аккаунт\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) =>\n                        option.children.indexOf(input) >= 0\n                    }\n                    onChange={(value) => this.ad_account_Selected(value)}\n                >\n                    {this.state.user.bms.map((bm) => {\n                        return bm.ad_accounts.map((ad_account) => {\n                            return (\n                                <Option value={ad_account.account_id}>\n                                    {ad_account.name}\n                                </Option>\n                            );\n                        });\n                    })}\n                </Select>\n            );\n        } else return <div></div>;\n    }\n    ad_account_Selected(value) {\n        this.setState({\n            isAdAccountSelected: true,\n            ad_account_id: value,\n        });\n        this.loadPixels(value);\n    }\n    async loadPixels(ad_account_id) {\n        let res = await axios.get(\n            `${url}/api/pixels/list/${this.state.user._id}/${ad_account_id}`\n        );\n        console.log(res);\n\n        if (res.data) {\n            this.setState({\n                pixels: res.data.data,\n            });\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        users: state.users,\n        proxies: state.proxies,\n        tcampaigns: state.tcampaigns,\n    };\n}\n\nexport default connect(mapStateToProps)(createCampaign);\n","import axios from \"axios\";\nimport * as types from \"./actionTypes.jsx\";\n\nfunction requestTemplateCampaigns() {\n    return { type: types.REQ_TCampaigns };\n}\n\nfunction receiveTemplateCampaigns(json) {\n    return {\n        type: types.RECV_TCampaigns,\n        data: json,\n    };\n}\n\nexport function fetchTemplatesCampaigns(url) {\n    return function (dispatch) {\n        dispatch(requestTemplateCampaigns());\n        return axios\n            .get(url)\n            .then(function (response) {\n                dispatch(receiveTemplateCampaigns(response.data));\n            })\n            .catch(function (response) {\n                console.log(response);\n            });\n    };\n}\n","import React from \"react\";\n\nimport axios from \"axios\";\n\nimport { connect } from \"react-redux\";\nimport settings from \"./../../containers/settings\";\nimport { fetchTemplatesCampaigns } from \"./../../actions/actionTemplateCampaign\";\n\nimport { PlusOutlined, DownOutlined, UploadOutlined } from \"@ant-design/icons\";\n\nimport { store } from \"./../../store/store.jsx\";\n\nimport {\n    Form,\n    Input,\n    Table,\n    Badge,\n    Menu,\n    Modal,\n    Button,\n    Select,\n    Popover,\n    Alert,\n    Upload,\n    message,\n} from \"antd\";\n\nconst { TextArea } = Input;\n\nconst { Option } = Select;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\n\nlet url = settings.url;\n\nconst normFile = (e) => {\n    console.log(\"Upload event:\", e);\n    if (Array.isArray(e)) {\n        return e;\n    }\n    return e && e.fileList;\n};\n\nclass CampaignsFunctions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            adsets_edit_count: 0,\n            ad_edit_count: 0,\n            edit_campaign_count: 0,\n            modal: false,\n            loading: false,\n            life_events: [],\n            countries: [],\n            campaign_data: {\n                campaigns_settings: [\n                    {\n                        key: 1,\n                        name: \"campaign_1\",\n                        buying_type: \"AUCTION\",\n                        objective: \"CONVERSIONS\",\n                        status: \"PAUSED\",\n                    },\n                ],\n                adsets: [\n                    // {\n                    //     key: 1,\n                    //     name: \"ad_set_1\",\n                    //     destination_type: \"MESSENGER\",\n                    //     daily_budget: 100,\n                    //     age_min: \"18\",\n                    //     geo_locations: \"US\",\n                    //     custom_event_type: \"LEAD\",\n                    //     status: \"ACTIVE\",\n                    //     window_days: 1,\n                    //     ads: [\n                    //         {\n                    //             name: \"ad_1\",\n                    //             key: 1,\n                    //             adset_key: 1,\n                    //         },\n                    //     ],\n                    // },\n                ],\n            },\n            default: {\n                campaign: {\n                    campaigns_settings: [\n                        {\n                            key: 1,\n                            name: \"campaign_1\",\n                            buying_type: \"AUCTION\",\n                            objective: \"CONVERSIONS\",\n                            status: \"PAUSED\",\n                        },\n                    ],\n                    adsets: [],\n                },\n                adset: {\n                    name: \"template adset\",\n                    destination_type: \"MESSENGER\",\n                    daily_budget: 100,\n                    age_min: \"18\",\n                    geo_locations: \"US\",\n                    custom_event_type: \"LEAD\",\n                    status: \"ACTIVE\",\n                    window_days: 1,\n                    ads: [],\n                },\n                ad: {\n                    name: \"template ad\",\n                    action: \"APPLY_NOW\",\n                },\n            },\n        };\n    }\n    adsets_data() {\n        let cm = this.state.campaign_data;\n        return cm.adsets;\n    }\n\n    ad_rows(key) {\n        let adset = null;\n        let adsets = this.state.campaign_data.adsets;\n        for (let i = 0; i < adsets.length; i++) {\n            if (adsets[i].key == key) {\n                adset = adsets[i];\n                break;\n            }\n        }\n        if (adset) {\n            let ads = adset.ads;\n            return (\n                <Table\n                    dataSource={ads}\n                    columns={this.columns_ads()}\n                    pagination={false}\n                    key={this.state.ad_edit_count}\n                    size=\"small\"\n                />\n            );\n        }\n    }\n\n    adsets_row(key) {\n        return (\n            <Table\n                dataSource={this.state.campaign_data.adsets}\n                columns={this.columns_adset()}\n                pagination={false}\n                key={this.state.adsets_edit_count}\n                expandable={{\n                    expandedRowRender: (record) => [\n                        this.ad_rows(record.key),\n                        <Button\n                            type=\"dashed\"\n                            className=\"yellow-color\"\n                            style={{ marginTop: \"10px\", width: \"100%\" }}\n                            onClick={() => this.new_ad(record.key)}\n                        >\n                            Add new ad\n                        </Button>,\n                    ],\n                    rowExpandable: (record) => record.key !== \"Not Expandable\",\n                }}\n                size=\"small\"\n            />\n        );\n    }\n    render() {\n        return (\n            <Menu\n                theme=\"light\"\n                mode=\"horizontal\"\n                style={{ lineHeight: \"64px\" }}\n                selectable={false}\n            >\n                <Menu.Item key=\"1\">\n                    <Button\n                        icon={<PlusOutlined />}\n                        onClick={() => this.setModalVisible(true)}\n                    >\n                        Добавить шаблон кампании\n                    </Button>\n                </Menu.Item>\n\n                <Modal\n                    title=\"Создание нового шаблона кампании\"\n                    wrapClassName=\"vertical-center-modal\"\n                    visible={this.state.modal}\n                    confirmLoading={this.state.loading}\n                    onCancel={() => this.setModalVisible(false)}\n                    cancelText=\"Закрыть\"\n                    okText=\"Создать\"\n                    okButtonProps={{\n                        onClick: this.onFinish,\n                        form: \"new-template-campaign\",\n                        key: \"submit\",\n                        htmlType: \"submit\",\n                    }}\n                    className=\"new_campaigns-modal\"\n                    style={{ minWidth: \"1400px\" }}\n                >\n                    {this.main_table()}\n                </Modal>\n            </Menu>\n        );\n    }\n\n    main_table() {\n        let table = (\n            <Table\n                columns={this.columns_campaign()}\n                expandable={{\n                    expandedRowRender: (record) => [\n                        this.adsets_row(record.key),\n                        <Button\n                            type=\"dashed\"\n                            className=\"blue-color\"\n                            style={{\n                                marginTop: \"10px\",\n                                width: \"100%\",\n                            }}\n                            onClick={() => this.new_adset()}\n                        >\n                            Add new adset\n                        </Button>,\n                    ],\n                    rowExpandable: (record) => record.key !== \"Not Expandable\",\n                }}\n                pagination={false}\n                dataSource={this.state.campaign_data.campaigns_settings}\n                bordered\n                key={this.state.edit_campaign_count}\n            />\n        );\n        return table;\n    }\n    setModalVisible = (value) => {\n        this.setState({ modal: value });\n    };\n    setModalLoading = (loading) => {\n        this.setState({ loading: loading });\n    };\n    reset = () => {\n        this.formRef.current.resetFields();\n    };\n    remove_adset(key) {\n        console.log(`REMOVE ADSET (KEY:${key})`);\n        let campaign_data = this.state.campaign_data;\n        let index = null;\n        for (let i = 0; i < campaign_data.adsets.length; i++) {\n            let adset = campaign_data.adsets[i];\n            if (adset.key == key) {\n                index = i;\n                break;\n            }\n        }\n        if (index != null) {\n            campaign_data.adsets.splice(index, 1);\n        }\n\n        this.setState({\n            campaign_data: campaign_data,\n            adsets_edit_count: this.state.adsets_edit_count + 1,\n        });\n    }\n    copy_adset(adset_source) {\n        console.log(`COPY ADSET (ID:${adset_source.key})`);\n        let adset = Object.assign({}, adset_source);\n        let adset_ads = adset.ads;\n        const { campaign_data } = this.state;\n        let adsets = campaign_data.adsets;\n        let lastId;\n        if (adsets.length) lastId = adsets[adsets.length - 1].key;\n        else lastId = 0;\n\n        adset.key = lastId + 1;\n        adset.name += \" (Copy)\";\n\n        adset.ads = [];\n        for (let i = 0; i < adset_ads.length; i++) {\n            let newobj_ad = Object.assign({}, adset_ads[i]);\n            newobj_ad.adset_key = adset.key;\n            adset.ads.push(newobj_ad);\n        }\n        campaign_data.adsets.push(adset);\n        this.setState({\n            campaign_data: campaign_data,\n            adsets_edit_count: this.state.adsets_edit_count + 1,\n        });\n    }\n    copy_ad(adset_key, ad) {\n        ad = Object.assign({}, ad);\n        console.log(`COPY AD (ID:${ad.key}, ADSET_ID: ${adset_key})`);\n\n        let campaign_data = this.state.campaign_data;\n        let adsets = campaign_data.adsets;\n\n        for (let i = 0; i < adsets.length; i++) {\n            if (adsets[i].key == adset_key) {\n                let lastId;\n                if (adsets[i].ads)\n                    lastId = adsets[i].ads[adsets[i].ads.length - 1].key + 1;\n                else lastId = 0;\n\n                ad.name = ad.name + \" (Copy)\";\n                ad.key = lastId;\n                campaign_data.adsets[i].ads.push(ad);\n                this.setState({\n                    campaign_data: campaign_data,\n                    ad_edit_count: this.state.ad_edit_count + 1,\n                });\n                break;\n            }\n        }\n    }\n    new_adset() {\n        let t = JSON.stringify(this.state.default.adset);\n        let new_adset = JSON.parse(t);\n        let campaign = this.state.campaign_data;\n        let adsets = campaign.adsets;\n        let lastId;\n        if (adsets.length) lastId = adsets[adsets.length - 1].key;\n        else lastId = 0;\n\n        new_adset.key = lastId + 1;\n        campaign.adsets.push(new_adset);\n        this.setState({\n            campaign_data: campaign,\n            adsets_edit_count: this.state.adsets_edit_count + 1,\n        });\n        console.log(this.state.campaign_data);\n    }\n    new_ad(adset_key) {\n        let t = JSON.stringify(this.state.default.ad);\n        let new_ad = JSON.parse(t);\n        let campaign = this.state.campaign_data;\n        let adsets = campaign.adsets;\n\n        for (let i = 0; i < adsets.length; i++) {\n            if (adsets[i].key === adset_key) {\n                console.log(adsets[i]);\n                let lastId;\n                if (adsets[i].ads.length)\n                    lastId = adsets[i].ads[adsets[i].ads.length - 1].key;\n                else lastId = 0;\n\n                new_ad.key = lastId + 1;\n                new_ad.adset_key = adset_key;\n\n                console.log(campaign.adsets[i]);\n                campaign.adsets[i].ads.push(new_ad);\n                this.setState({\n                    campaign_data: campaign,\n                    ad_edit_count: this.state.ad_edit_count + 1,\n                });\n                break;\n            }\n        }\n    }\n    remove_ad(adset_key, ad) {\n        console.log(`COPY AD (ID:${ad.key}, ADSET_ID: ${adset_key})`);\n\n        let campaign_data = this.state.campaign_data;\n        let adsets = campaign_data.adsets;\n\n        for (let i = 0; i < adsets.length; i++) {\n            if (adsets[i].key == adset_key) {\n                for (let y = 0; y < adsets[i].ads.length; y++) {\n                    if (adsets[i].ads[y].key == ad.key) {\n                        campaign_data.adsets[i].ads.splice(y, 1);\n                        this.setState({\n                            campaign_data: campaign_data,\n                            ad_edit_count: this.state.ad_edit_count + 1,\n                        });\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    columns_ads() {\n        return [\n            {\n                title: <span className=\"yellow-color text-xs\">Ad Name</span>,\n                dataIndex: \"name\",\n                key: \"name\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"yellow-color text-xs\">Title</span>,\n                dataIndex: \"title\",\n                key: \"title\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"yellow-color text-xs\">Text</span>,\n                dataIndex: \"text\",\n                key: \"text\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n            {\n                title: (\n                    <span className=\"yellow-color text-xs\">Description</span>\n                ),\n                dataIndex: \"description\",\n                key: \"description\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n            {\n                title: (\n                    <span className=\"yellow-color text-xs\">Welcome Text</span>\n                ),\n                dataIndex: \"welcome_text\",\n                key: \"welcome_text\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"yellow-color text-xs\">Answer</span>,\n                dataIndex: \"answer\",\n                key: \"answer\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n\n            {\n                title: <span className=\"yellow-color text-xs\">Image</span>,\n                dataIndex: \"file_image\",\n                key: \"file_image\",\n                render: (text, record) => {\n                    if (record.file_image) {\n                        if (record.file_image.fileList) {\n                            if (record.file_image.fileList.length) {\n                                return (\n                                    <img\n                                        style={{\n                                            width: \"75px\",\n                                            height: \"75px\",\n                                        }}\n                                        src={\n                                            record.file_image.fileList[\n                                                record.file_image.fileList\n                                                    .length - 1\n                                            ].thumbUrl\n                                        }\n                                    ></img>\n                                );\n                            }\n                        }\n                    } else return <span>-</span>;\n                },\n            },\n            {\n                title: <span className=\"yellow-color text-xs\">Action</span>,\n                dataIndex: \"action\",\n                key: \"action\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"yellow-color text-xs\">Функции</span>,\n                dataIndex: \"functions\",\n                key: \"functions\",\n\n                render: (text, record) => [\n                    <Button\n                        type=\"link\"\n                        className=\"red-color text-xs\"\n                        onClick={() => this.remove_ad(record.adset_key, record)}\n                        key=\"functions-delete\"\n                    >\n                        Remove\n                    </Button>,\n                    <Button\n                        type=\"link\"\n                        className=\"red-blue text-xs\"\n                        onClick={() => this.copy_ad(record.adset_key, record)}\n                        key=\"functions-copy\"\n                    >\n                        Copy\n                    </Button>,\n                    <Popover\n                        content={this.edit_ad_content(record)}\n                        title={`Edit ad settings (${record.name})`}\n                        trigger=\"click\"\n                        style={{ width: \"1000px\" }}\n                        overlayStyle={{\n                            width: \"400px\",\n                        }}\n                    >\n                        <Button type=\"primary\">Edit</Button>\n                    </Popover>,\n                ],\n            },\n        ];\n    }\n    columns_adset() {\n        return [\n            {\n                title: <span className=\"blue-color text-s\">Adset Name</span>,\n                dataIndex: \"name\",\n                key: \"name\",\n                render: (text, record) => (\n                    <span className=\"text-s\">{text}</span>\n                ),\n            },\n            {\n                title: (\n                    <span className=\"blue-color text-s\">Destination Type</span>\n                ),\n                dataIndex: \"destination_type\",\n                key: \"destination_type\",\n                render: (text, record) => (\n                    <span className=\"text-s\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"blue-color text-s\">Daily Budget</span>,\n                dataIndex: \"daily_budget\",\n                key: \"daily_budget\",\n                render: (text, record) => (\n                    <span className=\"text-s\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"blue-color text-s\">Genders</span>,\n                dataIndex: \"genders\",\n                key: \"genders\",\n                render: (text, record) => {\n                    let gender;\n                    if (text == \"1\") gender = \"Male\";\n                    else if (text == \"2\") gender = \"Female\";\n                    else gender = \"-\";\n                    return <span className=\"text-xs\">{gender}</span>;\n                },\n            },\n            {\n                title: <span className=\"blue-color text-s\">Age Min</span>,\n                dataIndex: \"age_min\",\n                key: \"age_min\",\n                render: (text, record) => {\n                    if (!text) {\n                        text = \"-\";\n                    }\n                    return <span className=\"text-xs\">{text}</span>;\n                },\n            },\n            {\n                title: <span className=\"blue-color text-s\">Age Max</span>,\n                dataIndex: \"age_max\",\n                key: \"age_max\",\n                render: (text, record) => {\n                    if (!text) {\n                        text = \"-\";\n                    }\n                    return <span className=\"text-xs\">{text}</span>;\n                },\n            },\n            {\n                title: <span className=\"blue-color text-s\">Geo</span>,\n                dataIndex: \"geo_locations\",\n                key: \"geo_locations\",\n                render: (text, record) => (\n                    <span className=\"text-s\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"blue-color text-s\">Life Events</span>,\n                dataIndex: \"life_events\",\n                key: \"life_events\",\n                render: (text, record) => {\n                    let events = this.state.life_events;\n                    let eventText = \"-\";\n                    for (let i = 0; i < events.length; i++) {\n                        if (events[i].id == text) eventText = events[i].name;\n                    }\n                    return <span className=\"text-s\">{eventText}</span>;\n                },\n            },\n            {\n                title: <span className=\"blue-color text-s\">Status</span>,\n                dataIndex: \"status\",\n                key: \"status\",\n                render: (text, record) => (\n                    <span className=\"text-s\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"blue-color text-s\">Window Days</span>,\n                dataIndex: \"window_days\",\n                key: \"window_days\",\n                render: (text, record) => (\n                    <span className=\"text-s\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"blue-color text-s\">Functions</span>,\n                dataIndex: \"functions\",\n                key: \"functions\",\n\n                render: (text, record) => [\n                    <Button\n                        type=\"link\"\n                        className=\"red-color text-s\"\n                        onClick={() => this.remove_adset(record.key)}\n                        key=\"functions-delete\"\n                    >\n                        Remove\n                    </Button>,\n                    <Button\n                        type=\"link\"\n                        className=\"red-blue text-s\"\n                        onClick={() => this.copy_adset(record)}\n                        key=\"functions-copy\"\n                    >\n                        Copy\n                    </Button>,\n                    <Popover\n                        content={this.edit_adset_content(record)}\n                        title={`Edit adset settings (${record.name})`}\n                        trigger=\"click\"\n                        style={{ width: \"1000px\" }}\n                        overlayStyle={{\n                            width: \"400px\",\n                        }}\n                    >\n                        <Button type=\"primary\">Edit</Button>\n                    </Popover>,\n                ],\n            },\n        ];\n    }\n    edit_adset = (record) => {\n        let campaign = this.state.campaign_data;\n        for (let i = 0; i < campaign.adsets.length; i++) {\n            if (campaign.adsets[i].key == record.key) {\n                campaign.adsets[i] = record;\n                this.setState({\n                    campaign_data: campaign,\n                    adsets_edit_count: this.state.adsets_edit_count + 1,\n                });\n                break;\n            }\n        }\n    };\n    edit_adset_content = (record) => {\n        const layout = {\n            labelCol: { span: 10 },\n            wrapperCol: { span: 20 },\n        };\n        return [\n            <Alert\n                message=\"Раздел adsets\"\n                type=\"info\"\n                showIcon\n                style={{ marginBottom: \"20px\" }}\n            />,\n            <Form\n                {...layout}\n                size=\"small\"\n                onFinish={this.edit_adset}\n                initialValues={record}\n            >\n                <Form.Item name={\"key\"} hidden={true}>\n                    <Input />\n                </Form.Item>\n                <Form.Item name={\"ads\"} hidden={true}>\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Name\"\n                    name={\"name\"}\n                    rules={[{ required: true }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Destination Type\"\n                    name={\"destination_type\"}\n                    rules={[{ required: true }]}\n                >\n                    <Select>\n                        <Option value=\"MESSENGER\">MESSENGER</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item\n                    label=\"Daily Budget\"\n                    name={\"daily_budget\"}\n                    rules={[{ required: true }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item label=\"Genders\" name={\"genders\"}>\n                    <Select allowClear defaultValue=\"\">\n                        <Option value=\"\">-</Option>\n                        <Option value=\"1\">Male</Option>\n                        <Option value=\"2\">Female</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item label=\"Age Min\" name={\"age_min\"}>\n                    <Input type=\"number\" />\n                </Form.Item>\n                <Form.Item label=\"Age Max\" name={\"age_max\"}>\n                    <Input type=\"number\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Geo\"\n                    name={\"geo_locations\"}\n                    rules={[{ required: true }]}\n                >\n                    <Select\n                        showSearch\n                        filterOption={(input, option) =>\n                            option.children.indexOf(input) >= 0\n                        }\n                    >\n                        {this.state.countries.map((country, index) => (\n                            <Option value={country.key}>\n                                {country.name} ({country.key})\n                            </Option>\n                        ))}\n                    </Select>\n                </Form.Item>\n                <Form.Item\n                    label=\"Events\"\n                    name={\"life_events\"}\n                    rules={[{ required: true }]}\n                >\n                    <Select>\n                        {this.state.life_events.map((event, index) => {\n                            return (\n                                <Option value={event.id}>{event.name}</Option>\n                            );\n                        })}\n                    </Select>\n                </Form.Item>\n                <Form.Item\n                    label=\"Status\"\n                    name={\"status\"}\n                    rules={[{ required: true }]}\n                >\n                    <Select>\n                        <Option value=\"ACTIVE\">ACTIVE</Option>\n                        <Option value=\"PAUSED\">PAUSED</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item\n                    label=\"Window Days\"\n                    name={\"window_days\"}\n                    rules={[{ required: true }]}\n                >\n                    <Select>\n                        <Option value=\"1\">1</Option>\n                        <Option value=\"7\">7</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item\n                    label=\"Pixel Event\"\n                    name={\"custom_event_type\"}\n                    rules={[{ required: true }]}\n                >\n                    <Select>\n                        <Option value=\"LEAD\">LEAD</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item rules={[{ required: true }]}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>,\n        ];\n    };\n    edit_campaign = (data) => {\n        let c_data = this.state.campaign_data;\n        for (let i = 0; i < c_data.campaigns_settings.length; i++) {\n            if (c_data.campaigns_settings[i].key == data.key) {\n                c_data.campaigns_settings[i] = data;\n                this.setState({\n                    campaign_data: c_data,\n                    edit_campaign_count: this.state.edit_campaign_count + 1,\n                });\n                break;\n            }\n        }\n    };\n    edit_ad = (record) => {\n        console.log(record);\n        let campaign = this.state.campaign_data;\n        for (let i = 0; i < campaign.adsets.length; i++) {\n            if (campaign.adsets[i].key == record.adset_key) {\n                for (let y = 0; y < campaign.adsets[i].ads.length; y++) {\n                    if (campaign.adsets[i].ads[y].key == record.key) {\n                        campaign.adsets[i].ads[y] = record;\n                        this.setState({\n                            campaign_data: campaign,\n                            ad_edit_count: this.state.ad_edit_count + 1,\n                        });\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    edit_ad_content(record) {\n        const layout = {\n            labelCol: { span: 10 },\n            wrapperCol: { span: 20 },\n        };\n\n        return [\n            <Alert\n                message=\"Данные объявления\"\n                type=\"info\"\n                showIcon\n                style={{ marginBottom: \"20px\" }}\n            />,\n            <Form\n                {...layout}\n                size=\"small\"\n                onFinish={this.edit_ad}\n                initialValues={record}\n            >\n                <Form.Item name={\"key\"} hidden={true}>\n                    <Input />\n                </Form.Item>\n                <Form.Item name={\"adset_key\"} hidden={true}>\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Name\"\n                    name={\"name\"}\n                    rules={[{ required: true }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Title\"\n                    name={\"title\"}\n                    rules={[{ required: true }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Text\"\n                    name={\"text\"}\n                    rules={[{ required: true }]}\n                >\n                    <TextArea rows={4} style={{ fontSize: \"10px\" }} />\n                </Form.Item>\n                <Form.Item label=\"Description\" name={\"description\"}>\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Welcome text\"\n                    name={\"welcome_text\"}\n                    rules={[{ required: true }]}\n                >\n                    <TextArea rows={4} style={{ fontSize: \"10px\" }} />\n                </Form.Item>\n                <Form.Item\n                    label=\"answer\"\n                    name={\"answer\"}\n                    rules={[{ required: true }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Action\"\n                    name={\"action\"}\n                    rules={[{ required: true }]}\n                >\n                    <Select>\n                        <Option value=\"APPLY_NOW\">APPLY_NOW</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item name=\"file_image\" label=\"Image\">\n                    <Upload\n                        name=\"file_image\"\n                        valuePropName=\"fileList\"\n                        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n                        listType=\"picture\"\n                    >\n                        <Button>\n                            <UploadOutlined /> Загрузить\n                        </Button>\n                    </Upload>\n                </Form.Item>\n\n                <Form.Item rules={[{ required: true }]}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>,\n        ];\n    }\n    edit_campaign_content(record) {\n        const layout = {\n            labelCol: { span: 10 },\n            wrapperCol: { span: 20 },\n        };\n        return [\n            <Alert\n                message=\"Данные компании\"\n                type=\"info\"\n                showIcon\n                style={{ marginBottom: \"20px\" }}\n            />,\n            <Form\n                {...layout}\n                size=\"small\"\n                onFinish={this.edit_campaign}\n                initialValues={record}\n            >\n                <Form.Item name={\"key\"} hidden={true}>\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Name\"\n                    name={\"name\"}\n                    rules={[{ required: true }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Buying Type\"\n                    name={\"buying_type\"}\n                    rules={[{ required: true }]}\n                >\n                    <Select>\n                        <Option value=\"AUCTION\">AUCTION</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item\n                    label=\"Objective\"\n                    name={\"objective\"}\n                    rules={[{ required: true }]}\n                >\n                    <Select>\n                        <Option value=\"CONVERSIONS\">CONVERSIONS</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item\n                    label=\"Status\"\n                    name={\"status\"}\n                    rules={[{ required: true }]}\n                >\n                    <Select>\n                        <Option value=\"PAUSED\">PAUSED</Option>\n                        <Option value=\"ACTIVE\">ACTIVE</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item rules={[{ required: true }]}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>,\n        ];\n    }\n    columns_campaign() {\n        return [\n            { title: \"Campaign Name\", dataIndex: \"name\", key: \"name\" },\n            {\n                title: \"Buying Type\",\n                dataIndex: \"buying_type\",\n                key: \"buying_type\",\n            },\n            { title: \"Objective\", dataIndex: \"objective\", key: \"objective\" },\n            { title: \"Status\", dataIndex: \"status\", key: \"status\" },\n            {\n                title: \"Functions\",\n                dataIndex: \"functions\",\n                key: \"functions\",\n                render: (text, record) => {\n                    return (\n                        <Popover\n                            content={this.edit_campaign_content(record)}\n                            title={`Edit campaign settings (${record.name})`}\n                            trigger=\"click\"\n                            overlayStyle={{\n                                width: \"400px\",\n                            }}\n                        >\n                            <Button type=\"primary\">Edit</Button>\n                        </Popover>\n                    );\n                },\n            },\n            // { title: \"Date\", dataIndex: \"createdAt\", key: \"createdAt\" },\n            // { title: 'Action', key: 'operation', render: () => <a>Publish</a> },\n        ];\n    }\n    onFinish = async () => {\n        let new_campaign = this.state.campaign_data;\n        console.log(new_campaign);\n        this.setModalLoading(true);\n\n        let res = await axios.post(\n            `${url}/api/campaigns/template/new`,\n            new_campaign\n        );\n\n        if (res.data.success) {\n            store.dispatch(\n                fetchTemplatesCampaigns(`${url}/api/campaigns/template/list`)\n            );\n            message.success(\"Success creating template campaign\");\n            this.setModalLoading(false);\n            this.setModalVisible(false);\n\n            let str = JSON.stringify(this.state.default.campaign);\n            let default_campaign = JSON.parse(str);\n            this.setState({\n                campaign_data: default_campaign,\n                adsets_edit_count: 0,\n                ad_edit_count: 0,\n                edit_campaign_count: 0,\n            });\n        } else {\n            message.error(\"Error creating template campaign\");\n        }\n    };\n\n    async load_countries() {\n        let res = await axios.get(`${url}/api/fb/targeting/category/countries`);\n        if (res.data) {\n            this.setState({\n                countries: res.data,\n            });\n        }\n    }\n\n    async load_life_events() {\n        let res = await axios.get(\n            `${url}/api/fb/targeting/category/life-events`\n        );\n        if (res.data) {\n            this.setState({\n                life_events: res.data,\n            });\n        }\n    }\n\n    componentDidMount() {\n        this.load_life_events();\n        this.load_countries();\n        console.log(\"Loading data...\");\n    }\n}\n\nexport default CampaignsFunctions;\n","import React from \"react\";\n\nimport axios from \"axios\";\n\nimport { connect } from \"react-redux\";\nimport settings from \"./../../containers/settings\";\n\nimport {\n    PlusOutlined,\n    DownOutlined,\n    UploadOutlined,\n    LoadingOutlined,\n} from \"@ant-design/icons\";\n\nimport {\n    Form,\n    Input,\n    Table,\n    Badge,\n    Menu,\n    Modal,\n    Button,\n    Select,\n    Popover,\n    Alert,\n    Upload,\n    message,\n    Spin,\n    Empty,\n} from \"antd\";\n\nconst loader = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nconst { TextArea } = Input;\n\nconst { Option } = Select;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\n\nlet url = settings.url;\n\nconst normFile = (e) => {\n    console.log(\"Upload event:\", e);\n    if (Array.isArray(e)) {\n        return e;\n    }\n    return e && e.fileList;\n};\n\nclass CampaignsList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            loading: false,\n            life_events: [],\n        };\n    }\n\n    ad_rows(key, campaign_key) {\n        console.log(key);\n        //return <span>1</span>;\n        let adset = null;\n        let adsets = this.props.tcampaigns.data.adsets;\n        for (let i = 0; i < adsets.length; i++) {\n            if (adsets[i].key == key && adsets[i].campaign_key == campaign_key) {\n                adset = adsets[i];\n                break;\n            }\n        }\n        if (adset) {\n            let ads = adset.ads;\n            console.log(ads);\n            return (\n                <Table\n                    dataSource={ads}\n                    columns={this.columns_ads()}\n                    pagination={false}\n                    size=\"small\"\n                />\n            );\n        }\n    }\n\n    adsets_row(key) {\n        let adsets = [];\n        this.props.tcampaigns.data.adsets.forEach((item) => {\n            if (item.campaign_key == key) adsets.push(item);\n        });\n\n        return (\n            <Table\n                dataSource={adsets}\n                columns={this.columns_adset()}\n                pagination={false}\n                expandable={{\n                    expandedRowRender: (record) => {\n                        return this.ad_rows(record.key, key);\n                    },\n                    rowExpandable: (record) => record.key !== \"Not Expandable\",\n                }}\n                size=\"small\"\n            />\n        );\n    }\n    render() {\n        return (\n            <Spin\n                spinning={this.props.tcampaigns.isLoading}\n                size=\"large\"\n                indicator={loader}\n                tip=\"Загрузка...\"\n                style={{ fontSize: \"20px\", marginTop: \"25%\" }}\n                alignment=\"middle\"\n            >\n                {this.main_table()}\n            </Spin>\n        );\n    }\n\n    main_table() {\n        let container;\n        if (this.props.tcampaigns) {\n            if (this.props.tcampaigns.data) {\n                container = (\n                    <Table\n                        columns={this.columns_campaign()}\n                        expandable={{\n                            expandedRowRender: (record) => [\n                                this.adsets_row(record.key),\n                            ],\n                            rowExpandable: (record) =>\n                                record.key !== \"Not Expandable\",\n                        }}\n                        pagination={false}\n                        dataSource={\n                            this.props.tcampaigns.data.campaigns_settings\n                        }\n                        bordered\n                        style={{ padding: \"25px\" }}\n                    />\n                );\n            }\n        } else container = <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />;\n        return container;\n    }\n    setModalVisible = (value) => {\n        this.setState({ modal: value });\n    };\n    setModalLoading = (loading) => {\n        this.setState({ loading: loading });\n    };\n    reset = () => {\n        this.formRef.current.resetFields();\n    };\n    columns_ads() {\n        return [\n            {\n                title: <span className=\"yellow-color text-xs\">Ad Name</span>,\n                dataIndex: \"name\",\n                key: \"name\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"yellow-color text-xs\">Title</span>,\n                dataIndex: \"title\",\n                key: \"title\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"yellow-color text-xs\">Text</span>,\n                dataIndex: \"text\",\n                key: \"text\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n            {\n                title: (\n                    <span className=\"yellow-color text-xs\">Description</span>\n                ),\n                dataIndex: \"description\",\n                key: \"description\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n            {\n                title: (\n                    <span className=\"yellow-color text-xs\">Welcome Text</span>\n                ),\n                dataIndex: \"welcome_text\",\n                key: \"welcome_text\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"yellow-color text-xs\">Answer</span>,\n                dataIndex: \"answer\",\n                key: \"answer\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n\n            {\n                title: <span className=\"yellow-color text-xs\">Image</span>,\n                dataIndex: \"file_image\",\n                key: \"file_image\",\n                render: (text, record) => {\n                    if (record.file_image) {\n                        if (record.file_image.fileList) {\n                            if (record.file_image.fileList.length) {\n                                return (\n                                    <img\n                                        style={{\n                                            width: \"75px\",\n                                            height: \"75px\",\n                                        }}\n                                        src={\n                                            record.file_image.fileList[\n                                                record.file_image.fileList\n                                                    .length - 1\n                                            ].thumbUrl\n                                        }\n                                    ></img>\n                                );\n                            }\n                        }\n                    } else return <span>-</span>;\n                },\n            },\n            {\n                title: <span className=\"yellow-color text-xs\">Action</span>,\n                dataIndex: \"action\",\n                key: \"action\",\n                render: (text, record) => (\n                    <span className=\"text-xs\">{text}</span>\n                ),\n            },\n        ];\n    }\n    columns_adset() {\n        return [\n            {\n                title: <span className=\"blue-color text-s\">Adset Name</span>,\n                dataIndex: \"name\",\n                key: \"name\",\n                render: (text, record) => (\n                    <span className=\"text-s\">{text}</span>\n                ),\n            },\n            {\n                title: (\n                    <span className=\"blue-color text-s\">Destination Type</span>\n                ),\n                dataIndex: \"destination_type\",\n                key: \"destination_type\",\n                render: (text, record) => (\n                    <span className=\"text-s\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"blue-color text-s\">Daily Budget</span>,\n                dataIndex: \"daily_budget\",\n                key: \"daily_budget\",\n                render: (text, record) => (\n                    <span className=\"text-s\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"blue-color text-s\">Genders</span>,\n                dataIndex: \"genders\",\n                key: \"genders\",\n                render: (text, record) => {\n                    let gender;\n                    if (text == \"1\") gender = \"Male\";\n                    else if (text == \"2\") gender = \"Female\";\n                    else gender = \"-\";\n                    return <span className=\"text-xs\">{gender}</span>;\n                },\n            },\n            {\n                title: <span className=\"blue-color text-s\">Age Min</span>,\n                dataIndex: \"age_min\",\n                key: \"age_min\",\n                render: (text, record) => {\n                    if (!text) {\n                        text = \"-\";\n                    }\n                    return <span className=\"text-xs\">{text}</span>;\n                },\n            },\n            {\n                title: <span className=\"blue-color text-s\">Age Max</span>,\n                dataIndex: \"age_max\",\n                key: \"age_max\",\n                render: (text, record) => {\n                    if (!text) {\n                        text = \"-\";\n                    }\n                    return <span className=\"text-xs\">{text}</span>;\n                },\n            },\n            {\n                title: <span className=\"blue-color text-s\">Geo</span>,\n                dataIndex: \"geo_locations\",\n                key: \"geo_locations\",\n                render: (text, record) => (\n                    <span className=\"text-s\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"blue-color text-s\">Life Events</span>,\n                dataIndex: \"life_events\",\n                key: \"life_events\",\n                render: (text, record) => {\n                    let events = this.state.life_events;\n                    let eventText = \"-\";\n                    for (let i = 0; i < events.length; i++) {\n                        if (events[i].id == text) eventText = events[i].name;\n                    }\n                    return <span className=\"text-s\">{eventText}</span>;\n                },\n            },\n            {\n                title: <span className=\"blue-color text-s\">Status</span>,\n                dataIndex: \"status\",\n                key: \"status\",\n                render: (text, record) => (\n                    <span className=\"text-s\">{text}</span>\n                ),\n            },\n            {\n                title: <span className=\"blue-color text-s\">Window Days</span>,\n                dataIndex: \"window_days\",\n                key: \"window_days\",\n                render: (text, record) => (\n                    <span className=\"text-s\">{text}</span>\n                ),\n            },\n        ];\n    }\n\n    columns_campaign() {\n        return [\n            {\n                title: \"Campaign Name\",\n                dataIndex: \"name\",\n                key: \"name\",\n            },\n            {\n                title: \"Buying Type\",\n                dataIndex: \"buying_type\",\n                key: \"buying_type\",\n            },\n            { title: \"Objective\", dataIndex: \"objective\", key: \"objective\" },\n            { title: \"Status\", dataIndex: \"status\", key: \"status\" },\n            // { title: \"Date\", dataIndex: \"createdAt\", key: \"createdAt\" },\n            // { title: 'Action', key: 'operation', render: () => <a>Publish</a> },\n        ];\n    }\n\n    async load_countries() {\n        let res = await axios.get(`${url}/api/fb/targeting/category/countries`);\n        if (res.data) {\n            this.setState({\n                countries: res.data,\n            });\n        }\n    }\n\n    async load_life_events() {\n        let res = await axios.get(\n            `${url}/api/fb/targeting/category/life-events`\n        );\n        if (res.data) {\n            this.setState({\n                life_events: res.data,\n            });\n        }\n    }\n\n    componentDidMount() {\n        this.load_life_events();\n        this.load_countries();\n        console.log(\"Loading data...\");\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        tcampaigns: state.tcampaigns,\n    };\n}\n\nexport default connect(mapStateToProps)(CampaignsList);\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport CampaignsFunctions from \"./../components/CampaignsTemplates/CampaignsFunctions\";\nimport CampaignsList from \"./../components/CampaignsTemplates/CampaignsList\";\n\nimport { Layout } from \"antd\";\nconst { Header, Content } = Layout;\n\nclass CampaignsTemplates extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <Layout>\n                <Header style={{ background: \"#fff\", padding: \"0\" }}>\n                    <CampaignsFunctions />\n                </Header>\n\n                <Content\n                    style={{\n                        background: \"#fff\",\n                        margin: \"16px 12px 0\",\n                        height: \"100%\",\n                        overflowY: \"auto\",\n                    }}\n                >\n                    <CampaignsList />\n                </Content>\n                {/* <MarkDown /> */}\n            </Layout>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        files: state.files,\n        user: state.user,\n    };\n}\n\nexport default connect(mapStateToProps)(CampaignsTemplates);\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./../components/Home.jsx\";\nimport Settings from \"./../components/Settings.jsx\";\nimport Users from \"./../components/Users.jsx\";\nimport SideBar from \"./../components/SideBar.jsx\";\nimport Proxies from \"./../components/Proxies\";\nimport createCampaign from \"./../components/createCampaign\";\nimport CampaignsTemplates from \"./CampaignsTemplates\";\n\nimport { connect } from \"react-redux\";\n\nimport { Layout } from \"antd\";\nconst { Sider } = Layout;\n\nclass WebPage extends React.Component {\n    test() {\n        console.log(this.props.config);\n    }\n    render() {\n        return (\n            <Router>\n                <Layout style={{ height: \"100%\" }}>\n                    <Sider\n                        breakpoint=\"lg\"\n                        collapsedWidth=\"0\"\n                        onCollapse={(collapsed, type) => {\n                            console.log(collapsed, type);\n                        }}\n                        stype={{ position: \"fixed\" }}\n                    >\n                        <SideBar />\n                    </Sider>\n                    <Route exact path=\"/home\" component={Home} />\n\n                    <Route path=\"/users\" component={Users} />\n                    <Route path=\"/proxies\" component={Proxies} />\n                    <Route\n                        path=\"/campaigns-templates\"\n                        component={CampaignsTemplates}\n                    />\n                    <Route path=\"/newcampaign\" component={createCampaign} />\n                    <Route path=\"/settings\" component={Settings} />\n                </Layout>\n            </Router>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        config: state.config,\n        files: state.files,\n        user: state.user,\n    };\n}\n\nexport default connect(mapStateToProps)(WebPage);\n","import settings from \"./containers/settings\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\n\nimport { store } from \"./store/store.jsx\";\n\nimport WebPage from \"./containers/WebPage.jsx\";\n\nimport \"./index.css\";\n\nimport { fetchProxies } from \"./actions/actionProxy.jsx\";\nimport { fetchUsers } from \"./actions/actionUser.jsx\";\nimport { fetchTemplatesCampaigns } from \"./actions/actionTemplateCampaign\";\n\nlet app = document.getElementById(\"root\");\n\nlet url = settings.url;\n\nfunction loadData() {\n    store.dispatch(fetchProxies(`${url}/api/proxies`));\n    store.dispatch(fetchUsers(`${url}/api/users`));\n    store.dispatch(\n        fetchTemplatesCampaigns(`${url}/api/campaigns/template/list`)\n    );\n}\n\nclass App extends React.Component {\n    componentDidMount() {\n        loadData();\n        console.log(\"Loading data...\");\n    }\n    render() {\n        return (\n            <Provider store={store}>\n                <WebPage />\n            </Provider>\n        );\n    }\n}\n\nReactDOM.render(<App />, app);\n"],"sourceRoot":""}